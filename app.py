import streamlit as st
import pandas as pd
import time
from algorithms import (
    first_fit_decreasing_rotated,
    best_fit_decreasing_rotated,
    guillotine_cutting_rotated,
    plot_placements_shelf_matplotlib
)

st.title("üì¶ Cutting Stock Problem Optimizer")

# üîπ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡πâ session_state
if "calculated" not in st.session_state:
    st.session_state.calculated = False
if "results" not in st.session_state:
    st.session_state.results = {}
if "kpi_df" not in st.session_state:
    st.session_state.kpi_df = pd.DataFrame()

# --- üõ† ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î ---
st.sidebar.header("‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î")
sheet_width = st.sidebar.number_input("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡πà‡∏ô‡πÄ‡∏°‡∏ó‡∏±‡∏•‡∏ä‡∏µ‡∏ó (cm)", min_value=10.0, value=91.4, step=0.1)

# ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏≠‡∏á‡πÉ‡∏™‡πà‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢
price_per_meter = st.sidebar.number_input("üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢ (‡∏ö‡∏≤‡∏ó/‡πÄ‡∏°‡∏ï‡∏£)", min_value=0.1, value=100.0, step=0.1)

# ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤/‡πÄ‡∏°‡∏ï‡∏£ ‚Üí ‡∏£‡∏≤‡∏Ñ‡∏≤/‡πÄ‡∏°‡∏ï‡∏£¬≤
price_per_m2 = price_per_meter / (sheet_width / 100)  # (‡∏ö‡∏≤‡∏ó/‡πÄ‡∏°‡∏ï‡∏£) √∑ (‡πÄ‡∏°‡∏ï‡∏£)
sort_strategy = st.sidebar.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö", ["area", "max_side"])

# --- üì• ‡∏£‡∏±‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå ---
st.header("üì• ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå")
input_method = st.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå", ["‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏á", "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV"])
orders = []
alert_flag = False  # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

if input_method == "‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏á":
    num_orders = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå", min_value=1, step=1)
    for i in range(num_orders):
        col1, col2 = st.columns(2)
        with col1:
            width = st.number_input(f"üîπ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á (cm) ‡∏ó‡∏µ‡πà {i+1}", min_value=1.0, step=0.1, key=f'w{i}')
        with col2:
            length = st.number_input(f"üîπ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß (cm) ‡∏ó‡∏µ‡πà {i+1}", min_value=1.0, step=0.1, key=f'l{i}')
        
        # ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç: ‡∏ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏î‡πâ‡∏≤‡∏ô (width & length) > sheet_width ‚Üí Error
        if width > sheet_width and length > sheet_width:
            alert_flag = True  # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á flag ‡πÄ‡∏õ‡πá‡∏ô True
        
        orders.append((width, length))

elif input_method == "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV":
    uploaded_file = st.file_uploader("üìÇ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'Width' ‡πÅ‡∏•‡∏∞ 'Length')", type="csv")
    if uploaded_file:
        df_orders = pd.read_csv(uploaded_file)
        if "Width" in df_orders.columns and "Length" in df_orders.columns:
            orders = list(zip(df_orders["Width"], df_orders["Length"]))
            
            # ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏´‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏¢‡∏≤‡∏ß‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏ó‡∏±‡∏•‡∏ä‡∏µ‡∏ó‡πÑ‡∏´‡∏°
            if any(w > sheet_width and l > sheet_width for w, l in orders):
                alert_flag = True

            st.dataframe(df_orders)
        else:
            st.error("‚ö†Ô∏è ‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'Width' ‡πÅ‡∏•‡∏∞ 'Length'")

# ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î (‡∏ó‡∏±‡πâ‡∏á‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô) ‡πÉ‡∏´‡πâ‡∏Ç‡∏∂‡πâ‡∏ô Alert ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
if alert_flag:
    st.error("üö® ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ: ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ö‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏¢‡∏≤‡∏ß‡πÉ‡∏´‡∏ç‡πà‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡πà‡∏ô‡πÄ‡∏°‡∏ó‡∏±‡∏•‡∏ä‡∏µ‡∏ó")

if orders and not alert_flag and st.button("üöÄ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì"):
    results = {}
    algorithms = {
        "FFD Rotated": first_fit_decreasing_rotated,
        "BFD Rotated": best_fit_decreasing_rotated,
        "Guillotine Rotated": guillotine_cutting_rotated
    }

    kpi_rows = []
    total_used_area = sum(w * l for w, l in orders)  # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    waste_values = {}

    for name, algo in algorithms.items():
        start_time = time.time()
        bins = algo(sheet_width, orders, sort_by=sort_strategy)
        proc_time = time.time() - start_time

        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Total Length Used (cm)
        total_length_used = sum(max(h for _, h in bin) for bin in bins)

        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Total Waste (cm¬≤)
        total_sheet_area = sheet_width * total_length_used
        total_waste = max(0, total_sheet_area - total_used_area)

        waste_values[name] = total_waste  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤ Waste ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ Alg

        kpi_rows.append({
            "Algorithm": name,
            "Total Length Used (cm)": round(total_length_used, 2),
            "Total Waste (cm¬≤)": round(total_waste, 2),
            "Processing Time (s)": round(proc_time, 6),
        })

        results[name] = bins

    # ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢‡πÑ‡∏õ
    min_waste = min(waste_values.values())  # ‡∏´‡∏≤‡∏Ñ‡πà‡∏≤ Waste ‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≥‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    cost_lost_values = {}
    
    for name, waste in waste_values.items():
        if all(w == min_waste for w in waste_values.values()):  # ‡∏ñ‡πâ‡∏≤ Waste ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô‡∏´‡∏°‡∏î
            cost_lost = waste * price_per_m2 / 10_000  # ‡πÅ‡∏õ‡∏•‡∏á cm¬≤ ‚Üí m¬≤
        else:
            cost_lost = (waste - min_waste) * price_per_m2 / 10_000  # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Alg ‡∏ó‡∏µ‡πà Waste ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤

        cost_lost_values[name] = cost_lost

    # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤ "Cost Lost" ‡πÉ‡∏ô KPI Table
    for row in kpi_rows:
        row["Cost Lost (Baht)"] = f"{round(cost_lost_values[row['Algorithm']], 2):,}"

    st.session_state.kpi_df = pd.DataFrame(kpi_rows)
    st.session_state.results = results
    st.session_state.calculated = True

# --- üìä ‡πÅ‡∏™‡∏î‡∏á KPI Summary ---
if st.session_state.calculated:
    st.subheader("üìä KPI Summary")
    st.dataframe(st.session_state.kpi_df)

    selected_algo = st.selectbox("üîç ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏°‡∏î‡∏π Visualization", list(st.session_state.results.keys()))
    fig = plot_placements_shelf_matplotlib(st.session_state.results[selected_algo], sheet_width, selected_algo)
    st.pyplot(fig)
